package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate p;
    private OpIterator child1, child2;
    private Tuple t1, t2; // next tuples in child1, child2
                                // for implementing simple nested loop join
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.t1 = null;
        this.t2 = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        int field = p.getField1();
        return child1.getTupleDesc().getFieldName(field);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        int field = p.getField2();
        return child2.getTupleDesc().getFieldName(field);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc td1 = child1.getTupleDesc();
        TupleDesc td2 = child2.getTupleDesc();
        return TupleDesc.merge(td1, td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        // use child1 as the outer relation
        // we use a simple nested loop join as the implementation
        if (t1 == null) {
            t1 = child1.next();
        }

        while (child1.hasNext()) {
            while (child2.hasNext()) {
                Tuple t2 = child2.next();
                if (p.filter(t1, t2)) {
                    Tuple joined = new Tuple(getTupleDesc());
                    joined.setRecordId(t1.getRecordId());

                    int num1 = t1.getTupleDesc().numFields();
                    int num2 = t2.getTupleDesc().numFields();
                    for (int i = 0; i < num1; i++) {
                        joined.setField(i, t1.getField(i));
                    }
                    for (int i = 0; i < num2; i++) {
                        joined.setField(num1 + i, t2.getField(i));
                    }
                    return joined;
                }
            }
            child2.rewind();
            t1 = child1.next();
        }

        // last tuple in outer relation
        while (child2.hasNext()) {
            Tuple t2 = child2.next();
            if (p.filter(t1, t2)) {
                Tuple joined = new Tuple(getTupleDesc());
                joined.setRecordId(t1.getRecordId());

                int num1 = t1.getTupleDesc().numFields();
                int num2 = t2.getTupleDesc().numFields();
                for (int i = 0; i < num1; i++) {
                    joined.setField(i, t1.getField(i));
                }
                for (int i = 0; i < num2; i++) {
                    joined.setField(num1 + i, t2.getField(i));
                }
                return joined;
            }
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{this.child1, this.child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
